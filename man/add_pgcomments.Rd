% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add_pgcomments.R
\name{add_pgcomments}
\alias{add_pgcomments}
\title{Write Postgres Comments for a Table}
\usage{
add_pgcomments(conn, schema = "public", tbl_name = NULL,
  tbl.comments = NULL, field.comments = NULL, overwrite = FALSE)
}
\arguments{
\item{conn}{a object inheriting from \code{DBIDriver} or \code{DBIConnection}.}

\item{schema}{an optional argument to specify the desired database schema location, default is \code{public}}

\item{tbl_name}{a required option if \code{nchar_df} argument is a single \code{data.frame}}

\item{tbl.comments}{an optional argument to include a comment for the table being written, if a \code{list} it must be named}

\item{field.comments}{an optional argument to include comments for each field type within the table being written , if a \code{list} it must be named}

\item{overwrite}{a \code{logical} argument whether to override the writing of pre-existing comments}
}
\value{
\code{add_pgcomments()} returns \code{TRUE} invisibly.
}
\description{
This function allows a user connected to a Postgres database to easily add comments for a single table
or the table's fields.
}
\examples{
\dontrun{
nchar_df <- get_nchar(iris)

myconn <- DBI::dbConnect(RSQL::SQLite(), ":memory:")

my_fields <- set_pgfields(iris,
default = FALSE,
conn = myconn)

write_pgtable(input = iris,
field.types = my_fields,
conn = myconn,
tbl_name = "iris")

add_pgcomments(conn = myconn,
tbl_name = "iris",
tbl.comments = "this is the iris dataset!",
override = TRUE)
}

}
