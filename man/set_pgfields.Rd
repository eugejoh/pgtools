% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/set_pgfields.R
\name{set_pgfields}
\alias{set_pgfields}
\title{Set or Assign Postgres Field Types}
\usage{
set_pgfields(input, nchar_df, default = FALSE, conn = NULL)
}
\arguments{
\item{input}{a \code{data.frame} or \code{list} of data frames}

\item{nchar_df}{the output from \code{\link{get_nchar}()}. If \code{nchar_df} is \code{NULL}, then \code{set_pgfields()}
will call \code{\link{get_nchar}()} to calculate appropriate element lengths.}

\item{default}{a \code{logical} option, default = \code{TRUE} uses \code{\link{DBI::dbDataType}()}}

\item{conn}{a object inheriting from \code{DBIDriver} or \code{DBIConnection}}
}
\value{
returns a named \code{character} vector or \code{list} of named \code{character} vectors that will be used
to specify Postgres table field types when writing to the database.
}
\description{
This function applies a Postgres field type based on either 1. The default output from \code{\link{DBI::dbDataType}()}
or 2. A preset condition that maps \code{R} classes to a specific Postgres field types.
}
\details{
Factor to character varying (n)
integer to smallint
numeric to real
character to character varying (n)

It is suggested to run \code{\link{get_nchar}()} prior to using \code{set_pgfields()} as \code{\link{get_nchar}()} is
a computationally expensive task.
}
\examples{
\dontrun{
nchar_df <- get_nchar(iris)

set_pgfields(nchar_df, conn = local_con_test)
}
}
