% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/write_pgtable.R
\name{write_pgtable}
\alias{write_pgtable}
\title{Write \code{data.frames} to Postgres}
\usage{
write_pgtable(input, field.types = NULL, conn = NULL,
  schema = "public", tbl_name = NULL, tbl.comments = NULL,
  field.comments = NULL, clean_vars = FALSE, ...)
}
\arguments{
\item{input}{a \code{data.frame} or \code{list} of data frames.}

\item{field.types}{a named \code{character} vector or a named \code{list} of named \code{character} vectors.}

\item{conn}{a object inheriting from \code{DBIDriver} or \code{DBIConnection}.}

\item{schema}{an optional argument to specify the desired database schema location, default is \code{public}}

\item{tbl_name}{a required option if \code{nchar_df} argument is a single \code{data.frame}}

\item{tbl.comments}{an optional argument to include a comment for the table being written, if a \code{list} it must be named}

\item{field.comments}{an optional argument to include comments for each field type within the table being written , if a \code{list} it must be named}

\item{clean_vars}{an optional \code{logical} argument that automatically cleans field names to be compatible with Postgres (removes upper-case and periods)}

\item{...}{other arguments passed to \code{\link{dbWriteTable}()}.}
}
\value{
\code{write_pgtable()} returns \code{TRUE} invisibly.
}
\description{
This function takes a \code{data.frame} or a \code{list} of \code{data.frames} and writes them to a
specified \code{schema} using your database connection \code{conn}.
Field types should be specified, it not
the default values from \code{\link{dbDataType}()} will be used.
}
\details{
This function is essentially a wrapper for \code{\link{dbWriteTable}()}. See details in \code{RPostgres}
documentation under \code{postgres-tables}.

If \code{input} is a \code{list} of data frames, dimensions of \code{field.types}, \code{tbl.comments}, and
\code{field.comments} must match \code{input}.
}
\examples{
\dontrun{
nchar_df <- get_nchar(iris)

my_fields <- set_pgfields(nchar_df,
default = FALSE,
conn = DBI::dbConnect(RSQL::SQLite(), ":memory:"))

write_pgtable(input = iris,
field.types = my_fields,
conn = DBI::dbConnect(RSQL::SQLite(), ":memory:"),
tbl_name = "iris")
}

}
